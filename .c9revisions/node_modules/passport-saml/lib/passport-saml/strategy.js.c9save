{"ts":1361496647616,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var passport = require('passport');\nvar util = require('util');\nvar saml = require('./saml');\n\nfunction Strategy (options, verify) {\n  if (typeof options == 'function') {\n    verify = options;\n    options = {};\n  }\n\n  if (!verify) {\n    throw new Error('SAML authentication strategy requires a verify function');\n  }\n\n  this.name = 'saml';\n\n  passport.Strategy.call(this);\n\n  this._verify = verify;\n  this._saml = new saml.SAML(options);\n}\n\nutil.inherits(Strategy, passport.Strategy);\n\nStrategy.prototype.authenticate = function (req, options) {\n  var self = this;\n  if (req.body && req.body.SAMLResponse) {\n    // We have a response, get the user identity out of it\n    var response = req.body.SAMLResponse;\n\n    this._saml.validateResponse(response, function (err, profile, loggedOut) {\n      if (err) {\n        return self.error(err);\n      }\n\n      if (loggedOut) {\n        if (self._saml.options.logoutRedirect) {\n          self.redirect(self._saml.options.logoutRedirect);\n          return;  \n        } else {\n          self.redirect(\"/\");          \n        }\n        \n      }\n\n      var verified = function (err, user, info) {\n        if (err) {\n          return self.error(err);\n        }\n\n        if (!user) {\n          return self.fail(info);\n        }\n\n        self.success(user, info);\n      };\n\n      self._verify(profile, verified);\n    });\n  } else {\n    // Initiate new SAML authentication request\n\n    this._saml.getAuthorizeUrl(req, function (err, url) {\n      if (err) {\n        return self.fail();\n      }\n\n      self.redirect(url);\n    });\n  }\n};\n\nStrategy.prototype.logout = function(req, callback) {\n  this._saml.getLogoutUrl(req, callback);\n};\n\nmodule.exports = Strategy;\n"]],"start1":0,"start2":0,"length1":0,"length2":1696}]],"length":1696}
