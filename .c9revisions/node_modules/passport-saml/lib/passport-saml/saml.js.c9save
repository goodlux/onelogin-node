{"ts":1361496641137,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var zlib = require('zlib');\nvar xml2js = require('xml2js');\nvar xmlCrypto = require('xml-crypto');\nvar crypto = require('crypto');\nvar xmldom = require('xmldom');\nvar querystring = require('querystring');\n\nvar SAML = function (options) {\n  this.options = this.initialize(options);\n};\n\nSAML.prototype.initialize = function (options) {\n  if (!options) {\n    options = {};\n  }\n\n  if (!options.protocol) {\n    options.protocol = 'https://';\n  }\n\n  if (!options.path) {\n    options.path = '/saml/consume';\n  }\n\n  if (!options.issuer) {\n    options.issuer = 'onelogin_saml';\n  }\n\n  if (options.identifierFormat === undefined) {\n    options.identifierFormat = \"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\";\n  }\n\n  return options;\n};\n\nSAML.prototype.generateUniqueID = function () {\n  var chars = \"abcdef0123456789\";\n  var uniqueID = \"\";\n  for (var i = 0; i < 20; i++) {\n    uniqueID += chars.substr(Math.floor((Math.random()*15)), 1);\n  }\n  return uniqueID;\n};\n\nSAML.prototype.generateInstant = function () {\n  var date = new Date();\n  return date.getUTCFullYear() + '-' + ('0' + (date.getUTCMonth()+1)).slice(-2) + '-' + ('0' + date.getUTCDate()).slice(-2) + 'T' + ('0' + (date.getUTCHours()+2)).slice(-2) + \":\" + ('0' + date.getUTCMinutes()).slice(-2) + \":\" + ('0' + date.getUTCSeconds()).slice(-2) + \"Z\"; \n};\n\nSAML.prototype.signRequest = function (xml) {\n  var signer = crypto.createSign('RSA-SHA1');\n  signer.update(xml);\n  return signer.sign(this.options.privateCert, 'base64');\n}\n\nSAML.prototype.generateAuthorizeRequest = function (req) {\n  var id = \"_\" + this.generateUniqueID();\n  var instant = this.generateInstant();\n\n  // Post-auth destination\n  if (this.options.callbackUrl) {\n    callbackUrl = this.options.callbackUrl;\n  } else {\n    var callbackUrl = this.options.protocol + req.headers.host + this.options.path;\n  }\n\n  var request =\n   \"<samlp:AuthnRequest xmlns:samlp=\\\"urn:oasis:names:tc:SAML:2.0:protocol\\\" ID=\\\"\" + id + \"\\\" Version=\\\"2.0\\\" IssueInstant=\\\"\" + instant + \n   \"\\\" ProtocolBinding=\\\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\\\" AssertionConsumerServiceURL=\\\"\" + callbackUrl + \"\\\" Destination=\\\"\" + \n   this.options.entryPoint + \"\\\">\" +\n    \"<saml:Issuer xmlns:saml=\\\"urn:oasis:names:tc:SAML:2.0:assertion\\\">\" + this.options.issuer + \"</saml:Issuer>\\n\";\n\n  if (this.options.identifierFormat) {\n    request += \"<samlp:NameIDPolicy xmlns:samlp=\\\"urn:oasis:names:tc:SAML:2.0:protocol\\\" Format=\\\"\" + this.options.identifierFormat + \n    \"\\\" AllowCreate=\\\"true\\\"></samlp:NameIDPolicy>\\n\";\n  }\n   \n  request += \n    \"<samlp:RequestedAuthnContext xmlns:samlp=\\\"urn:oasis:names:tc:SAML:2.0:protocol\\\" Comparison=\\\"exact\\\">\" +\n    \"<saml:AuthnContextClassRef xmlns:saml=\\\"urn:oasis:names:tc:SAML:2.0:assertion\\\">urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport</saml:AuthnContextClassRef></samlp:RequestedAuthnContext>\\n\" +\n  \"</samlp:AuthnRequest>\";\n\n  return request;\n};\n\nSAML.prototype.generateLogoutRequest = function (req) {\n  var id = \"_\" + this.generateUniqueID();\n  var instant = this.generateInstant();\n\n  //samlp:LogoutRequest xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\" xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\" \n  // ID=\"_135ad2fd-b275-4428-b5d6-3ac3361c3a7f\" Version=\"2.0\" Destination=\"https://idphost/adfs/ls/\" \n  //IssueInstant=\"2008-06-03T12:59:57Z\"><saml:Issuer>myhost</saml:Issuer><NameID Format=\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\" \n  //NameQualifier=\"https://idphost/adfs/ls/\">myemail@mydomain.com</NameID<samlp:SessionIndex>_0628125f-7f95-42cc-ad8e-fde86ae90bbe\n  //</samlp:SessionIndex></samlp:LogoutRequest>\n\n  var request = \"<samlp:LogoutRequest xmlns:samlp=\\\"urn:oasis:names:tc:SAML:2.0:protocol\\\" \"+\n    \"xmlns:saml=\\\"urn:oasis:names:tc:SAML:2.0:assertion\\\" ID=\\\"\"+id+\"\\\" Version=\\\"2.0\\\" IssueInstant=\\\"\"+instant+\n    \"\\\" Destination=\\\"\"+this.options.entryPoint + \"\\\">\" +\n    \"<saml:Issuer xmlns:saml=\\\"urn:oasis:names:tc:SAML:2.0:assertion\\\">\" + this.options.issuer + \"</saml:Issuer>\"+\n    \"<saml:NameID Format=\\\"\"+req.user.nameIDFormat+\"\\\">\"+req.user.nameID+\"</saml:NameID>\"+\n    \"</samlp:LogoutRequest>\";\n  return request;\n}\n\nSAML.prototype.requestToUrl = function (request, operation, callback) {\n  var self = this;\n  zlib.deflateRaw(request, function(err, buffer) {\n    if (err) {\n      return callback(err);\n    }\n\n    var base64 = buffer.toString('base64');\n    var target = self.options.entryPoint + '?';\n\n    if (operation === 'logout') {\n      if (self.options.logoutUrl) {\n        target = self.options.logoutUrl + '?';\n      } \n    }\n \n    var samlRequest = {\n      SAMLRequest: base64\n    };\n\n    if (self.options.privateCert) {\n      samlRequest.SigAlg = 'http://www.w3.org/2000/09/xmldsig#rsa-sha1';\n      samlRequest.Signature = self.signRequest(querystring.stringify(samlRequest));\n    }\n    target += querystring.stringify(samlRequest);\n\n    callback(null, target);\n  });\n}\n\nSAML.prototype.getAuthorizeUrl = function (req, callback) {\n  var request = this.generateAuthorizeRequest(req);\n  \n  this.requestToUrl(request, 'authorize', callback);\n};\n\nSAML.prototype.getLogoutUrl = function(req, callback) {\n  var request = this.generateLogoutRequest(req);\n\n  this.requestToUrl(request, 'logout', callback);\n}\n\nSAML.prototype.certToPEM = function (cert) {\n  cert = cert.match(/.{1,64}/g).join('\\n');\n  cert = \"-----BEGIN CERTIFICATE-----\\n\" + cert;\n  cert = cert + \"\\n-----END CERTIFICATE-----\\n\";\n  return cert;\n};\n\nSAML.prototype.validateSignature = function (xml, cert) {\n  var self = this;\n  var doc = new xmldom.DOMParser().parseFromString(xml);\n  var signature = xmlCrypto.xpath.SelectNodes(doc, \"//*[local-name(.)='Signature' and namespace-uri(.)='http://www.w3.org/2000/09/xmldsig#']\")[0];\n  var sig = new xmlCrypto.SignedXml();\n  sig.keyInfoProvider = {\n    getKeyInfo: function (key) {\n      return \"<X509Data></X509Data>\"\n    },\n    getKey: function (keyInfo) {\n      return self.certToPEM(cert);\n    }\n  };\n  sig.loadSignature(signature.toString());\n  return sig.checkSignature(xml);\n};\n\nSAML.prototype.getElement = function (parentElement, elementName) {\n  if (parentElement['saml:' + elementName]) {\n    return parentElement['saml:' + elementName];\n  } else if (parentElement['samlp:'+elementName]) {\n    return parentElement['samlp:'+elementName];\n  } \n  return parentElement[elementName];\n}\n\nSAML.prototype.validateResponse = function (samlResponse, callback) {\n  var self = this;\n  var xml = new Buffer(samlResponse, 'base64').toString('ascii');\n  var parser = new xml2js.Parser({explicitRoot:true});\n  parser.parseString(xml, function (err, doc) {\n    // Verify signature\n    if (self.options.cert && !self.validateSignature(xml, self.options.cert)) {\n      return callback(new Error('Invalid signature'), null, false);\n    }\n\n    var response = self.getElement(doc, 'Response');\n    if (response) {\n      var assertion = self.getElement(response, 'Assertion');\n      if (!assertion) {\n        return callback(new Error('Missing SAML assertion'), null, false);\n      }\n\n      profile = {};\n      var issuer = self.getElement(assertion[0], 'Issuer');\n      if (issuer) {\n        profile.issuer = issuer[0];\n      }\n\n      var subject = self.getElement(assertion[0], 'Subject');\n      if (subject) {\n        var nameID = self.getElement(subject[0], 'NameID');\n        if (nameID) {\n            profile.nameID = nameID[0][\"_\"];\n\n          if (nameID[0]['$'].Format) {\n            profile.nameIDFormat = nameID[0]['$'].Format;\n          }\n        }\n      }\n\n      var attributeStatement = self.getElement(assertion[0], 'AttributeStatement');\n      if (!attributeStatement) {\n        return callback(new Error('Missing AttributeStatement'), null, false);\n      }\n\n      var attributes = self.getElement(attributeStatement[0], 'Attribute');\n\n      if (attributes) {\n        attributes.forEach(function (attribute) {\n          var value = self.getElement(attribute, 'AttributeValue');\n          if (typeof value[0] === 'string') {\n            profile[attribute['$'].Name] = value[0];\n          } else {\n            profile[attribute['$'].Name] = value[0]['_'];\n          }\n        });\n      }\n        \n\n      if (!profile.mail && profile['urn:oid:0.9.2342.19200300.100.1.3']) {\n        // See http://www.incommonfederation.org/attributesummary.html for definition of attribute OIDs\n        profile.mail = profile['urn:oid:0.9.2342.19200300.100.1.3'];\n      }\n\n      if (!profile.email && profile.mail) {\n        profile.email = profile.mail;\n      }\n\n      callback(null, profile, false);\n    } else {\n      var logoutResponse = self.getElement(doc, 'LogoutResponse');\n\n      if (logoutResponse){\n        callback(null, null, true);\n      } else {\n        return callback(new Error('Unknown SAML response message'), null, false);\n      }\n\n    }\n\n\n  });\n};\n\nexports.SAML = SAML;\n"]],"start1":0,"start2":0,"length1":0,"length2":8813}]],"length":8813}
