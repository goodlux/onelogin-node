{"ts":1361500062924,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var express = require('express')\n  , passport = require('passport')\n  , util = require('util')\n  , SamlStrategy = require('../../lib/passport-saml/index').Strategy\n  , fs = require('fs');\n  \n\nvar users = [\n    { id: 1, givenName: 'bob', email: 'bob@example.com' }\n  , { id: 2, givenName: 'joe', email: 'joe@example.com' }\n];\n\nfunction findByEmail(email, fn) {\n  for (var i = 0, len = users.length; i < len; i++) {\n    var user = users[i];\n    if (user.email === email) {\n      return fn(null, user);\n    }\n  }\n  return fn(null, null);\n}\n\n\n// Passport session setup.\n//   To support persistent login sessions, Passport needs to be able to\n//   serialize users into and deserialize users out of the session.  Typically,\n//   this will be as simple as storing the user ID when serializing, and finding\n//   the user by ID when deserializing.\npassport.serializeUser(function(user, done) {\n  done(null, user.email);\n});\n\npassport.deserializeUser(function(id, done) {\n  findByEmail(id, function (err, user) {\n    done(err, user);\n  });\n});\n\npassport.use(new SamlStrategy(\n  {\n    path: '/login/callback',\n    entryPoint: 'https://openidp.feide.no/simplesaml/saml2/idp/SSOService.php',\n    issuer: 'passport-saml',\n    protocol: 'http://',\n    cert: 'MIICizCCAfQCCQCY8tKaMc0BMjANBgkqhkiG9w0BAQUFADCBiTELMAkGA1UEBhMCTk8xEjAQBgNVBAgTCVRyb25kaGVpbTEQMA4GA1UEChMHVU5JTkVUVDEOMAwGA1UECxMFRmVpZGUxGTAXBgNVBAMTEG9wZW5pZHAuZmVpZGUubm8xKTAnBgkqhkiG9w0BCQEWGmFuZHJlYXMuc29sYmVyZ0B1bmluZXR0Lm5vMB4XDTA4MDUwODA5MjI0OFoXDTM1MDkyMzA5MjI0OFowgYkxCzAJBgNVBAYTAk5PMRIwEAYDVQQIEwlUcm9uZGhlaW0xEDAOBgNVBAoTB1VOSU5FVFQxDjAMBgNVBAsTBUZlaWRlMRkwFwYDVQQDExBvcGVuaWRwLmZlaWRlLm5vMSkwJwYJKoZIhvcNAQkBFhphbmRyZWFzLnNvbGJlcmdAdW5pbmV0dC5ubzCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAt8jLoqI1VTlxAZ2axiDIThWcAOXdu8KkVUWaN/SooO9O0QQ7KRUjSGKN9JK65AFRDXQkWPAu4HlnO4noYlFSLnYyDxI66LCr71x4lgFJjqLeAvB/GqBqFfIZ3YK/NrhnUqFwZu63nLrZjcUZxNaPjOOSRSDaXpv1kb5k3jOiSGECAwEAATANBgkqhkiG9w0BAQUFAAOBgQBQYj4cAafWaYfjBU2zi1ElwStIaJ5nyp/s/8B8SAPK2T79McMyccP3wSW13LHkmM1jwKe3ACFXBvqGQN0IbcH49hu0FKhYFM/GPDJcIHFBsiyMBXChpye9vBaTNEBCtU3KjjyG0hRT2mAQ9h+bkPmOvlEo/aH0xR68Z9hw4PF13w=='/*,\n    privateCert: fs.readFileSync('./cert.pem', 'utf-8')*/\n  },\n  function(profile, done) {\n    console.log(\"Auth with\", profile);\n    if (!profile.email) {\n      return done(new Error(\"No email found\"), null);\n    }\n    // asynchronous verification, for effect...\n    process.nextTick(function () {\n      findByEmail(profile.email, function(err, user) {\n        if (err) {\n          return done(err);\n        }\n        if (!user) {\n          // \"Auto-registration\"\n          users.push(profile);\n          return done(null, profile);\n        }\n        return done(null, user);\n      })\n    });\n  }\n));\n\nvar app = express.createServer();\n\n// configure Express\napp.configure(function() {\n  app.set('views', __dirname + '/views');\n  app.set('view engine', 'ejs');\n  app.use(express.logger());\n  app.use(express.cookieParser());\n  app.use(express.bodyParser());\n  app.use(express.methodOverride());\n  app.use(express.session({ secret: 'keyboard cat' }));\n  app.use(passport.initialize());\n  app.use(passport.session());\n  app.use(app.router);\n  app.use(express.static(__dirname + '/../../public'));\n});\n\n\napp.get('/', function(req, res){\n  res.render('index', { user: req.user });\n});\n\napp.get('/account', ensureAuthenticated, function(req, res){\n  res.render('account', { user: req.user });\n});\n\napp.get('/login',\n  passport.authenticate('saml', { failureRedirect: '/', failureFlash: true }),\n  function(req, res) {\n    res.redirect('/');\n  }\n);\n\napp.post('/login/callback',\n  passport.authenticate('saml', { failureRedirect: '/', failureFlash: true }),\n  function(req, res) {\n    res.redirect('/');\n  }\n);\n\napp.get('/logout', function(req, res){\n  req.logout();\n  res.redirect('/');\n});\n\napp.listen(3000, function () {\n  console.log(\"Server listening in http://localhost:3000\");\n});\n\n// Simple route middleware to ensure user is authenticated.\n//   Use this route middleware on any resource that needs to be protected.  If\n//   the request is authenticated (typically via a persistent login session),\n//   the request will proceed.  Otherwise, the user will be redirected to the\n//   login page.\nfunction ensureAuthenticated(req, res, next) {\n  if (req.isAuthenticated()) { return next(); }\n  res.redirect('/login')\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":4341}]],"length":4341}
